// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String?   
  image         String?
  accounts      Account[] 
  sessions      Session[]
  phoneNumber   String?
  birthday      DateTime?
  role          UserRole @default(STUDENT)
  student       Student?
  tutor         Tutor?
  manager       Manager?
}

enum UserRole {
  STUDENT
  TUTOR
  MANAGER
}

model Student {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  
  department  String
  semesters   StudentSemester[]
}

model StudentSemester {
  startingDate      DateTime
  studentId         String
  student           Student  @relation(fields: [studentId], references: [id])
  @@id([startingDate, studentId])

  courses           StudentSemesterCourse[]
  sessionRequests   StudentSessionRequest[]
  totalHours        Int @default(12)
}

model StudentSemesterCourse {
  semesterStartingDate DateTime
  studentId            String
  studentSemester      StudentSemester @relation(fields: [semesterStartingDate, studentId], references: [startingDate, studentId])

  courseName           String
  courseDepartment     String
  course               AllCoursesInSCE @relation(fields: [courseName, courseDepartment], references: [courseName, courseDepartment])
  @@id([semesterStartingDate, studentId, courseName, courseDepartment])
}


model StudentSessionRequest {
  id                                String @id @default(cuid())
  
  studentId                         String
  semesterStartingDate              DateTime
  studentSemester                   StudentSemester @relation(fields: [semesterStartingDate, studentId], references: [startingDate, studentId])

  courseName                        String
  courseDepartment                  String
  course                            AllCoursesInSCE @relation(fields: [courseName, courseDepartment], references: [courseName, courseDepartment])
  
  progress                          StudentSessionRequestProgress[]      

  tutorId                           String?
  chosenTutor                       Tutor? @relation(fields: [tutorId], references: [id]) // the tutor that the student chose after communicating

  hours                             Int
  
  status                            StudentSessionRequestStatus @default(PENDING)
}

enum StudentSessionRequestStatus {
  PENDING     // by default
  COMPLETED   // when the chosen tutor confirms that the reinforcement session is completed
  CANCELED     // when the student cancels the request
}

model StudentSessionRequestProgress {
  requestId                           String
  request                             StudentSessionRequest  @relation(fields: [requestId], references: [id])

  tutorId                             String
  tutor                               Tutor  @relation(fields: [tutorId], references: [id])

  @@id([requestId, tutorId])

  tutorResponse                       TutorResponse @default(PENDING)
}

enum TutorResponse {
  PENDING     // by default
  ACCEPTED    // when the tutor accepts the request and they start communicating
  REJECTED    // when the tutor rejects the request
}


model Manager {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  // Additional fields specific to managers
}

model AllCoursesInSCE{
  courseName                String
  courseDepartment          String
  // courseName and courseDepartment are the primary key
  @@id([courseName, courseDepartment])
  courseSemester            Int
  tutorCourses              TutorCourse[]
  tutorCourseRequests       TutorCourseRequest[]
  studentSemesterCourses    StudentSemesterCourse[]
  studentSessionRequests    StudentSessionRequest[]
}

model Tutor {
  id                                  String  @id @default(cuid())
  userId                              String  @unique
  user                                User  @relation(fields: [userId], references: [id])
  courses                             TutorCourse[]
  requests                            TutorCourseRequest[]
  potentialStudentSessionRequests     StudentSessionRequestProgress[]
  studentSessionRequests              StudentSessionRequest[]
}

model TutorCourse {
  tutorId                           String
  courseName                        String
  courseDepartment                  String
  tutor      Tutor                  @relation(fields: [tutorId], references: [id])
  course     AllCoursesInSCE        @relation(fields: [courseName, courseDepartment], references: [courseName, courseDepartment])
  @@id([tutorId, courseName, courseDepartment])

  courseActive                      Boolean @default(true)
}

model TutorCourseRequest {
  id                                String @id @default(cuid())
  tutorId                           String
  courseName                        String
  courseDepartment                  String
  tutor      Tutor                  @relation(fields: [tutorId], references: [id])
  course     AllCoursesInSCE        @relation(fields: [courseName, courseDepartment], references: [courseName, courseDepartment])

  courseGrade                       Float
  courseRequestMessage              String?

  date                              DateTime @default(now())
  status                            CourseRequestStatus @default(PENDING)
}

enum CourseRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}



